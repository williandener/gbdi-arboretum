/* Copyright 2003-2017 GBDI-ICMC-USP <caetano@icmc.usp.br>
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* 
*   http://www.apache.org/licenses/LICENSE-2.0
* 
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
/**
 * @file
 *
 * This file defines a Class to extract the Scalable Color
 *
* @version 1.0
 */

#ifndef SCALABLECOLOR_H
#define SCALABLECOLOR_H

#include <artemis/image/ImageBase.h>
#include <artemis/extractor/Extractor.h>
#include <artemis/extractor/HSVColorSystem.h>

#include <vector>

/**
*
* @brief Extractor of Scalable Color
* @author Gustavo Blanco(gublanco@icmc.usp.br)
* @author Marcos Vinicius Naves Bedo (marcosivni@grad.icmc.usp.br)
* @see Image stBasicArrayObject
* @version 1.0
*/
template <class SignatureType, class DataObjectType = Image >
class ScalableColorExtractor : public Extractor<SignatureType, DataObjectType> {

    private:
        u_int16_t hue;
        u_int16_t saturation;
        u_int16_t vLuminance;
        const u_int16_t HSV_CHANNELS = 3;
        u_int16_t numFeatures;
        u_int16_t numBitPlanesDiscarded;

    public:
        const int16_t scalableColorQuantValues[256][3] =
            {
                    {217,9,255},{-71,9,255},{-27,8,127},{-54,9,255},{-8,7,63},{-14,7,63},{-22,7,63},{-29,8,127},
                    {-6,6,31},{-13,7,63},{-11,6,31},{-22,7,63},{-9,7,63},{-14,7,63},{-19,7,63},{-22,7,63},
                    {0,4,7},{-1,5,15},{0,3,3},{-2,6,31},{1,5,15},{-5,6,31},{0,5,15},{0,7,63},
                    {2,5,15},{-2,6,31},{-2,5,15},{0,7,63},{3,5,15},{-5,6,31},{-1,6,31},{4,7,63},
                    {0,3,3},{0,3,3},{0,3,3},{-1,5,15},{0,3,3},{0,3,3},{-1,5,15},{-2,5,15},
                    {-1,5,15},{-1,4,7},{-1,5,15},{-3,5,15},{-1,5,15},{-2,5,15},{-4,5,15},{-5,5,15},
                    {-1,5,15},{0,3,3},{-2,5,15},{-2,5,15},{-2,5,15},{-3,5,15},{-3,5,15},{0,5,15},
                    {0,5,15},{0,5,15},{0,5,15},{2,5,15},{-1,5,15},{0,5,15},{3,6,31},{3,5,15},
                    {0,2,1},{0,2,1},{0,3,3},{0,4,7},{0,2,1},{0,2,1},{0,3,3},{-1,4,7},
                    {-1,4,7},{-1,4,7},{-2,5,15},{-1,5,15},{-2,5,15},{-2,5,15},{-2,5,15},{-1,5,15},
                    {0,3,3},{0,2,1},{0,3,3},{-1,4,7},{0,2,1},{0,3,3},{-1,4,7},{-1,5,15},
                    {-2,5,15},{-1,4,7},{-2,5,15},{-1,5,15},{-3,5,15},{-3,5,15},{-2,5,15},{0,5,15},
                    {0,3,3},{0,3,3},{0,3,3},{-1,4,7},{0,3,3},{0,3,3},{-2,5,15},{-2,5,15},
                    {-2,5,15},{-2,4,7},{-2,5,15},{-1,5,15},{-3,5,15},{-3,5,15},{-1,5,15},{0,5,15},
                    {1,4,7},{0,3,3},{0,4,7},{-1,4,7},{0,3,3},{0,4,7},{-1,4,7},{0,4,7},
                    {-1,4,7},{-1,3,3},{-1,4,7},{0,4,7},{-1,5,15},{0,5,15},{1,5,15},{-1,5,15},
                    {0,2,1},{0,2,1},{0,3,3},{0,3,3},{0,2,1},{0,2,1},{0,3,3},{0,3,3},
                    {0,2,1},{0,2,1},{0,3,3},{0,4,7},{0,2,1},{0,2,1},{0,3,3},{0,3,3},
                    {0,3,3},{0,2,1},{0,3,3},{1,4,7},{0,2,1},{0,3,3},{-1,4,7},{1,4,7},
                    {0,3,3},{0,3,3},{0,3,3},{0,4,7},{0,3,3},{0,3,3},{-1,4,7},{0,4,7},
                    {0,3,3},{0,2,1},{0,3,3},{0,3,3},{0,2,1},{0,2,1},{0,3,3},{0,3,3},
                    {0,3,3},{0,2,1},{0,3,3},{1,4,7},{0,2,1},{0,3,3},{0,4,7},{1,4,7},
                    {0,3,3},{0,2,1},{0,3,3},{1,5,15},{0,3,3},{0,3,3},{-1,5,15},{2,5,15},
                    {0,3,3},{0,3,3},{0,3,3},{0,4,7},{0,3,3},{0,3,3},{-1,4,7},{1,5,15},
                    {0,3,3},{0,2,1},{0,3,3},{0,3,3},{0,2,1},{0,3,3},{0,4,7},{0,4,7},
                    {0,3,3},{0,2,1},{0,3,3},{1,4,7},{0,3,3},{0,3,3},{-1,5,15},{1,5,15},
                    {0,3,3},{0,2,1},{-1,3,3},{1,5,15},{0,3,3},{-1,4,7},{-1,5,15},{2,5,15},
                    {0,3,3},{0,3,3},{0,3,3},{0,4,7},{0,3,3},{-1,3,3},{0,4,7},{1,4,7},
                    {1,3,3},{0,2,1},{-1,3,3},{0,3,3},{0,3,3},{0,3,3},{0,3,3},{1,4,7},
                    {0,3,3},{0,2,1},{-1,3,3},{0,4,7},{0,3,3},{0,3,3},{0,4,7},{1,4,7},
                    {0,3,3},{0,2,1},{0,3,3},{0,4,7},{0,3,3},{-1,3,3},{0,4,7},{1,4,7},
                    {0,3,3},{0,3,3},{0,3,3},{0,3,3},{0,3,3},{-1,3,3},{0,3,3},{-1,4,7}
            };

        const u_int16_t tabelle[5][255] = {

            {0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,
             12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,
             8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,
             4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,
             0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,
             12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,
             8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,
             4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,
             0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,
             12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,
             8,10,12,14,0,4,8,12,0,4,8,12,0,4,8,12,0,4,8,12,0,4,
             8,12,0,4,8,12,0,4,8,12,0,8,0},

            {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,
             2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,
             5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,
             8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,
             11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,
             13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,0,0,0,0,
             0,0,0,0,2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,6,6,
             6,6,6,6,6,6,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,
             12,12,12,12,12,12,12,12,14,14,14,14,14,14,14,14,0,0,0,0,0,0,
             0,0,2,2,2,2,2,2,2,2,8,8,8,8,8,8,8,8,10,10,10,10,
             10,10,10,10,0,0,0,0,2,2,2,2,8,8,8,8,10,10,10,10,0,0,
             0,0,8,8,8,8,0,0,0,0,0,0,0},

            {1,3,5,7,9,11,13,15,1,3,5,7,9,11,13,15,1,3,5,7,9,11,
             13,15,1,3,5,7,9,11,13,15,1,3,5,7,9,11,13,15,1,3,5,7,
             9,11,13,15,1,3,5,7,9,11,13,15,1,3,5,7,9,11,13,15,1,3,
             5,7,9,11,13,15,1,3,5,7,9,11,13,15,1,3,5,7,9,11,13,15,
             1,3,5,7,9,11,13,15,1,3,5,7,9,11,13,15,1,3,5,7,9,11,
             13,15,1,3,5,7,9,11,13,15,1,3,5,7,9,11,13,15,0,2,4,6,
             8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,
             4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,
             0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,
             12,14,0,2,4,6,8,10,12,14,0,2,4,6,8,10,12,14,0,2,4,6,
             8,10,12,14,2,6,10,14,2,6,10,14,2,6,10,14,2,6,10,14,0,4,
             8,12,0,4,8,12,0,4,8,12,4,12,8},

            {0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,2,2,2,2,2,2,
             2,2,3,3,3,3,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,
             5,5,5,5,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,8,8,
             8,8,8,8,8,8,9,9,9,9,9,9,9,9,10,10,10,10,10,10,10,10,
             11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,
             13,13,14,14,14,14,14,14,14,14,15,15,15,15,15,15,15,15,1,1,1,1,
             1,1,1,1,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5,7,7,
             7,7,7,7,7,7,9,9,9,9,9,9,9,9,11,11,11,11,11,11,11,11,
             13,13,13,13,13,13,13,13,15,15,15,15,15,15,15,15,4,4,4,4,4,4,
             4,4,6,6,6,6,6,6,6,6,12,12,12,12,12,12,12,12,14,14,14,14,
             14,14,14,14,0,0,0,0,2,2,2,2,8,8,8,8,10,10,10,10,2,2,
             2,2,10,10,10,10,8,8,8,8,0,0,0},

            {128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,128,128,128,128,
             128,128,128,128,128,128,128,64,64,64,64,
             64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
             64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,
             64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,32,32,32,32,32,32,
             32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,
             32,32,32,32,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,8,8,
             8,8,8,8,8,8,4,4,4,4,2,2,1}
        };

        const u_int16_t sorttab[256] = {
           0, 4, 8, 12, 32, 36, 40, 44, 128, 132, 136, 140, 160, 164, 168, 172,
                2, 6, 10, 14, 34, 38, 42, 46, 130, 134, 138, 142, 162, 166, 170, 174,
                64, 66, 68, 70, 72, 74, 76, 78, 96, 98, 100, 102, 104, 106, 108, 110,
                192, 194, 196, 198, 200, 202, 204, 206, 224, 226, 228, 230, 232, 234, 236, 238,
                16, 18, 20, 22, 24, 26, 28, 30, 48, 50, 52, 54, 56, 58, 60, 62, 80, 82, 84, 86,
                88, 90, 92, 94, 112, 114, 116, 118, 120, 122, 124, 126, 144, 146, 148, 150, 152,
                154, 156, 158, 176, 178, 180, 182, 184, 186, 188, 190, 208, 210, 212, 214, 216,
                218, 220, 222, 240, 242, 244, 246, 248, 250, 252, 254,
                1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41,
                43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81,
                83, 85, 87, 89, 91, 93, 95, 97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117,
                119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151,
                153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183, 185,
                187, 189, 191, 193, 195, 197, 199, 201, 203, 205, 207, 209, 211, 213, 215, 217, 219,
                221, 223, 225, 227, 229, 231, 233, 235, 237, 239, 241, 243, 245, 247, 249, 251, 253, 255
        };

    private:
        void quantizeScalableUniform(u_int16_t hsv_pixel[], int32_t *index);
        std::vector<int32_t> computeNormalizedHistogram(const DataObjectType &image, std::vector<int32_t> histogram) throw (std::runtime_error);
        std::vector<int32_t> quantizeHistogram(std::vector<int32_t> histogram);
        std::vector<int32_t> histo_3d_hirarch_5(const u_int16_t tablae, std::vector<int32_t> histogram) throw (std::runtime_error);
        void hsv_hir_quant_lin_5(int32_t *histogram);
        void red_bits_pro_bin_5(int32_t *histogram);
        std::vector<int32_t> applyHaarTransform(std::vector<int32_t> histogram) throw (std::runtime_error);

    public:
        ScalableColorExtractor(u_int16_t value1 = 256, u_int16_t value2 = 0) throw (std::runtime_error);
        virtual ~ScalableColorExtractor();

        void setNumBitPlanesDiscarded(u_int16_t value);
        void setSaturation(u_int16_t value);
        void setHue(u_int16_t value);
        void setVLuminance(u_int16_t value);
        void setNumFeatures(u_int16_t value);

        u_int16_t getHue() const;
        u_int16_t getSaturation() const;
        u_int16_t getNumBitPlanesDiscarded() const;
        u_int16_t getVLuminance() const;
        u_int16_t getNumFeatures() const;

        virtual void generateSignature(const DataObjectType &image, SignatureType &sign) throw (std::runtime_error);
};

#include "ScalableColor-inl.h"
#endif // SCALABLECOLOR_H
